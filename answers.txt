# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Akshay Bhat 
Student ID: 004285612
Email: akshaybhat@ucla.edu

# Partner 2 (if you're working in a team)
 Name: Anirudh Dayal 
 Student ID: 604331630
 Email: adayal@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

Forked processes as the peers were downloading, waited for the downloads
to complete by counting the number of forked processes and ensuring
their completion, and then forked processes for the uploads as well.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

Firstly, the function strncpy should be used to limit the size of the string
copied over (with the variable FILENAMESIZE-1),
which will prevent attacks caused by malicious peers trying to create buffer overflows.  
The defintion for filename size was set to 256, and in the start_download function,
when coping file name into the buffer, we made sure only the right amount
of the data is being copied into rather then any limit. 
This limited the buffer overflow because the program was trying to replace
the return address with something malicious. 
By sizing the strncpy and setting the limit to FILENAMESIZE-1,
we ensured the name could not be longer than the the alocated buffer.
Additionally, we prevented any other buffer overflow problems by null-terminating the string
after strncpy function in the function start_download. 

Making the following changes ensures that at least start_download function, 
and hence the return value of TASK_DOWNLOAD task would be correct when downloading ‘filename’ from peers. 
Had we not had made these changes, strncpy would have copied an arbitrary
number of bytes over including some malicious code when connecting and downloading from the peers.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)



-We also increased the size of the global variable TASK_BUF_SIZE to 4096, to reduce the
possibility of the buffer filling up, and allowing it to handle more peers simultaneously. 
Before the value was too small, so multiple bad peers could prevent the program from serving any requests. 
Handling peers simultaneously also allowed for increased parallelization
and faster response times in the overall network. 

-We noticed that in the task_upload function, when a file’s data was being transferred into the buffer, 
there was no limit to how much of the file would be copied. We imposed a maximum file size limit (128KB),
by creating a global variable.
In the function task_upload, when transferring data from the file to the buffer, if the size written exceeds this limit,
we try to read again.
Thus, the bad peer could not force the tracker to continue downloading data indefinitely, and not serve any requests,
which was one of the possible attacks bad peers could have used.

-A malicious peer could have passed in the path of a virus in any directory of its choice,
and this would have been read into the program.
Therefore, we created a check to ensure that the file handled by the peer could
not be outside the current working directory. 
This was done by comparing the path inputted with the current directory (in task_upload),
and reporting an error of they didn't match. Before, because there was no check, any file from a
non-working directory could be handled by the peer causing potential problems. 
Fixing it prevented malicious requests from files outside of the current working directory,
something we noticed might happen because there were no bounds for where the incoming file/directory was coming from.

-Lastly, we also created a check to prevent a null file path provided as input to a peer.
This ensured that a full and valid null terminating string is the only thing that is read into the function.
There didn't seem to be any attack by the bad peers of this form, but it is a valid safeguard nonetheless.
This was implemented in task_upload, and simply checked if the input path was NULL.

With the following changes, we were able to run the code with no security flaws, 
and when we ran make run-bad, none of the bad peers would be served.



# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

Exercise 3 was removed from the requirements of the project, as per the instructions of the TA.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
